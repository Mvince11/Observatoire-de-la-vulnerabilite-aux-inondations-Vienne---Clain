---
title: "Carte Intercative"
lang: fr
back-to-top-navigation: false
format:
  dashboard:
    orientation: columns
    #page-layout: full
    
resources:
  - Images/icons/*.svg
  - layers/data_s27a.json
    
include-in-header:
  text: |
    <script src="js/maplibre.js"></script>
    <link href="js/maplibre.css" rel="stylesheet">
    <script src="js/jquery_3.5.min.js" type="text/javascript"></script>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" rel="stylesheet">
    
    <link rel="stylesheet" href="js/photon-geocoder-autocomplete.min.css" type="text/css">
    <script src="js/photon-geocoder-autocomplete.min.js" type="text/javascript"></script>
---

##  {.sidebar}
```{=html}
<div id="nav-menu-objectif-n°2"></div>
```

```{ojs}
//| echo: false
//| output: false
bbox_sru = FileAttachment("layers/bb.json").json()
```

```{=html}
<div style="color:#dc7633; text-align:inherit !important; font-size:1.3em; font-weight:bold; font-family: calibri;margin-bottom:10%;">
 Dommages aux entreprises en fonction de la hauteur d’eau et de la durée de submersion
 </div>

<div style="text-align:inherit !important; font-size:1.1em; font-family: calibri;margin-bottom:10%;"> Selon les caractéristiques de l’inondation, il est possible, d’évaluer le montant des pertes à attendre selon le type d’entreprises.</div>


<a href=https://fiches.eptb-vienne.fr/ind_27a.pdf target=_blank><i class="fa fa-exclamation-circle"></i> Télécharger la fiche indicateur et la carte</a> 


<div style="width: auto; padding:5px; border: 1px solid #A0A0A0; border-radius:15px; text-align: center !important; background: #F2F2F2; font-size:1.1em;margin-top:10%;">
La zone inondable correspond à l'aléa centennal construit à partir des données disponibles et notamment réglementaires mais en aucun cas ne se substitue aux documents réglementaires en vigueur.
</div>
```
# Cartographie

## Column {width="60%"}

```{ojs}
//| echo: false
//| output: false

bassin_vienne = FileAttachment("layers/bassin_vienne.geojson").json();
departement = FileAttachment("layers/departement.geojson").json();
region = FileAttachment("layers/region.geojson").json();
epci = FileAttachment("layers/epci.geojson").json();
perimetre = FileAttachment("layers/perimetre.json").json();
slgri = FileAttachment("layers/slgri.json").json();
tri = FileAttachment("layers/tri.json").json();
zone_inondable = FileAttachment("layers/zone_inondable.geojson").json();
indicateurs = FileAttachment("layers/indicateurs.json").json();
cours_d_eau = FileAttachment("layers/cours_d_eau.geojson").json();
indicateursGeojson = FileAttachment("layers/indicateurs.geojson").json();


```

```{ojs}
//| echo: false
//| padding: 0px
//| expandable: false
//| fill: true


map = {
  const container = html`<div class="map-container" id="map" style="height: 665px; width: 100%;"></div>`;
  yield container;

  const sourcePlanIGN = {
    style: 'normal',
    format: 'image/png',
    layer: 'GEOGRAPHICALGRIDSYSTEMS.PLANIGNV2'
  };

  const sourceOrtho = {
    style: 'normal',
    format: 'image/jpeg',
    layer: 'HR.ORTHOIMAGERY.ORTHOPHOTOS'
  };

  const map = new maplibregl.Map({
    container: container,
    style: 'https://basemaps.cartocdn.com/gl/voyager-gl-style/style.json',
    <!-- center: [-0.04, 46.3051],  -->
    zoom: 11
  });

  map.addControl(new maplibregl.FullscreenControl(), 'top-right');
  map.addControl(new maplibregl.NavigationControl({ visualizePitch: true }), 'top-left');
  map.addControl(new maplibregl.ScaleControl({ maxWidth: 80, unit: 'metric' }));
  

  const toggleStyle = (useOrtho) => {
    if (useOrtho) {
      map.setLayoutProperty('orthoIGN', 'visibility', 'visible');
      map.setLayoutProperty('planIGN', 'visibility', 'none');
    } else {
      map.setLayoutProperty('orthoIGN', 'visibility', 'none');
      map.setLayoutProperty('planIGN', 'visibility', 'visible');
    }
  };

  map.on('load', () => {
    map.fitBounds(
    [
      [-0.04, 46.3051],   // Sud-Ouest
      [0.7741, 46.8565]   // Nord-Est
    ],
    {
      padding: 20,
      linear: true,
      duration: 0
    }
  );
    // Ajout des fonds raster IGN
    map.addSource('raster-planign', {
      type: 'raster',
      tiles: [
        `https://data.geopf.fr/wmts?SERVICE=WMTS&style=${sourcePlanIGN.style}&VERSION=1.0.0&REQUEST=GetTile&format=${sourcePlanIGN.format}&layer=${sourcePlanIGN.layer}&tilematrixset=PM&TileMatrix={z}&TileCol={x}&TileRow={y}`
      ],
      tileSize: 256,
      attribution: '© <a href="https://www.ign.fr/">IGN</a>',
      minzoom: 0,
      maxzoom: 22
    });

    map.addSource('raster-ortho', {
      type: 'raster',
      tiles: [
        `https://data.geopf.fr/wmts?SERVICE=WMTS&style=${sourceOrtho.style}&VERSION=1.0.0&REQUEST=GetTile&format=${sourceOrtho.format}&layer=${sourceOrtho.layer}&tilematrixset=PM&TileMatrix={z}&TileCol={x}&TileRow={y}`
      ],
      tileSize: 256,
      attribution: '© <a href="https://www.ign.fr/">IGN</a>',
      minzoom: 0,
      maxzoom: 22
    });

    map.addLayer({
      id: 'planIGN',
      type: 'raster',
      source: 'raster-planign',
      layout: { visibility: 'visible' }
    });

    map.addLayer({
      id: 'orthoIGN',
      type: 'raster',
      source: 'raster-ortho',
      layout: { visibility: 'none' }
    });
    
    //fetch('layers/indicateurs.geojson')
     //.then(response => response.json())
     //.then(indicateursGeojson => { 
              
    
    const layersData = [
      { data: bassin_vienne, type: 'line', id: 'bassinvienneLayer', color: 'green', layout: {visibility:'none'}},
      { data: region, type: 'line', id: 'regionLayer', color: 'red', layout: {visibility:'none'} },
      { data: departement, type: 'line', id: 'departementLayer', color: '#a772b9', width: 2,  layout:{visibility:'none'}},
      { data: epci, type: 'line', id: 'epciLayer', color: '#567ae3', layout: {visibility:'none'} },
      {  data: indicateursGeojson, // GeoJSON contenant une propriété 's27a'
          type: 'fill',
          id: 'indicateurs27aLayer',
          opacity: 0.9,
          width: 1,
          dynamicColor: { 
            property: 's27a',
            // La logique exacte de la légende à appliquer :
            // - 0 ou null => #d9d9d9
            // - < 150     => #f9f0d9
            // - < 500000  => #fdb77a
            // - < 2000000 => #ec603F
            // - >= 2000000 => #b30000
            mapping: {
              '150000': '#f9f0d9',
              '500000': '#fdb77a',
              '2000000': '#ec603F',
              '6000000': '#b30000'
            },
            default: '#d9d9d9' // utilisé si null, undefined ou < 150
          },
          layout: { visibility: 'visible' }
        },
      { data: zone_inondable, type: 'fill', id: 'zoneinondableLayer', color: '#b4c3ef' , width: 2, opacity: 1, 
      layout: {visibility:'visible'} }
      
    ];
     
    // Ajout des couches vectorielles
      layersData.forEach(layer => {
        map.addSource(layer.id, {
          type: 'geojson',
          data: layer.data
        });
      
        const layerConfig = {
          id: layer.id,
          type: layer.type,
          source: layer.id,
          paint: {},
          layout: layer.layout
        };
      
        if (layer.type === 'fill') {
          if (layer.dynamicColor) {
            const prop = ['get', layer.dynamicColor.property];
            layerConfig.paint['fill-color'] = [
              'case',
              ['!', ['has', layer.dynamicColor.property]], '#d9d9d9',                       // Propriété absente
              ['any', ['==', ['get', layer.dynamicColor.property], null], ['==', ['get', layer.dynamicColor.property], 0]], '#d9d9d9', // null ou 0
              ['<', ['get', layer.dynamicColor.property], 150000], '#f9f0d9',
              ['<', ['get', layer.dynamicColor.property], 500000], '#fdb77a',
              ['<', ['get', layer.dynamicColor.property], 2000000], '#ec603F',
              ['>=', ['get', layer.dynamicColor.property], 2000000], '#b30000',
              '#d9d9d9' // fallback
            ];
          } else {
            layerConfig.paint['fill-color'] = layer.color || '#000000';
          }
        
          layerConfig.paint['fill-opacity'] = layer.opacity || 0.4;
          layerConfig.paint['fill-outline-color'] = '#000000';
        
        } else if (layer.type === 'line') {
          layerConfig.paint['line-color'] = layer.color || '#000000';
          layerConfig.paint['line-width'] = layer.width || 1;
        }

        map.addLayer(layerConfig);
        
         map.addLayer({
                  id: 'indicateurs27aLabels',
                  type: 'symbol',
                  source: 'indicateurs27aLayer', // le même id que ta source GeoJSON
                  layout: {
                    'text-field': ['get', 'nom'],
                    'text-size': 11,
                    'text-font': ['Open Sans Bold', 'Arial Unicode MS Bold'],
                    'text-offset': [0, 0.6],
                    'text-anchor': 'top'
                  },
                  paint: {
                    'text-color': '#000000',
                    'text-halo-color': '#ffffff',
                    'text-halo-width': 1
                  }
                });
        
      
      map.on('click', 'indicateurs27aLayer', (e) => {
        const feature = e.features[0];
      
        const nom = feature.properties.nom || 'Non disponible';
      
        const population = feature.properties.population
          ? feature.properties.population.toLocaleString('fr-FR') + ' habitants'
          : 'Non disponible';
      
        const s27aValue = parseFloat(feature.properties.s27a);
        const dommages = !isNaN(s27aValue)
          ? s27aValue.toLocaleString('fr-FR') + ' €'
          : '0 €';
      
        const popupContent = `
        <style>
          .maplibregl-popup-content {
            padding: 4px !important;
            border: 1px solid;
            border-radius: 8px;
            width: max-content;
            box-shadow: rgba(101, 147, 220, 0.2) 0px 4px 8px 0px;
          }
        </style>
          <div style="font-family: sans-serif; font-size: 13px; margin:10px;">
          <div style="background-color: #d1ee9c; border: 1px solid; border-radius:8px; margin-bottom:16px; padding:10px;"><strong>
          <center>${nom}</center>
          </strong></div>
            <p><strong>Population :</strong> ${population}</p>
            <p><strong>Dommages aux entreprises :</strong> ${dommages}</p>
          </div>
        `;
      
        new maplibregl.Popup({closeButton: false})
          .setLngLat(e.lngLat)
          .setHTML(popupContent)
          .addTo(map);
      });



      map.on('mouseenter', 'indicateurs27aLayer', () => {
        map.getCanvas().style.cursor = 'pointer';
      });
      map.on('mouseleave', 'indicateurs27aLayer', () => {
        map.getCanvas().style.cursor = '';
      });
    });

    // Interface de contrôle des couches
    const mapLayersDiv = document.createElement('div');
    mapLayersDiv.classList.add('mapLayers');
    mapLayersDiv.style.position = 'absolute';
    mapLayersDiv.style.zIndex = '1000';
    mapLayersDiv.innerHTML = `
      <button id="toggleMapMenuButton" class="btn btn-light aria-label="Afficher les couches" title="Afficher les couches">
        <img src="Images/icons/layers-half.svg" alt="Icône SVG" width="25" height="25">
      </button>
      <div id="layersList" style="display: none; background: white; padding: 10px; border: 1px solid #ccc;"></div>
    `;
    map.getContainer().appendChild(mapLayersDiv);

    const toggleableLayerIds = layersData.map(layer => layer.id);
    const aliasLayerIds = {
      bassinvienneLayer: 'Bassin de la Vienne',
      regionLayer: 'Région',
      departementLayer: 'Département',
      epciLayer: 'EPCI',
      zoneinondableLayer: 'Zonage Inondable',
      indicateurs27aLayer: 'Dommages financiers des entreprises'
    };

    function toggleLayerVisibility(id, visible) {
      const visibility = visible ? 'visible' : 'none';
      if (map.getLayer(id)) {
        map.setLayoutProperty(id, 'visibility', visibility);
      }
    }

    const layersListDiv = mapLayersDiv.querySelector('#layersList');
    
    toggleableLayerIds.forEach(id => {
      const name = aliasLayerIds[id] || id;

      const checkbox = document.createElement('input');
      checkbox.type = 'checkbox';
      checkbox.id = id;
      checkbox.className = 'form-check-input';
      
      // ✅ Lire la visibilité actuelle directement dans la carte
      map.once('idle', () => {
        const visibility = map.getLayoutProperty(id, 'visibility');
        checkbox.checked = visibility === 'visible';
      });
  
      checkbox.addEventListener('change', () => toggleLayerVisibility(id, checkbox.checked));

      const label = document.createElement('label');
      label.htmlFor = id;
      label.className = 'form-check-label';
      label.innerText = name;

      const wrapper = document.createElement('div');
      wrapper.className = 'form-check';
      wrapper.appendChild(checkbox);
      wrapper.appendChild(label);

      layersListDiv.appendChild(wrapper);
    });

    document.getElementById('toggleMapMenuButton').addEventListener('click', () => {
      layersListDiv.style.display = layersListDiv.style.display === 'none' ? 'block' : 'none';
    });
     

    // Menu bascule fond de plan
    const mapMenuDiv = document.createElement('div');
    mapMenuDiv.classList.add('mapFondDePlan');
    mapMenuDiv.style.position = 'absolute';
    mapMenuDiv.style.zIndex = '1000';
    mapMenuDiv.innerHTML = `
      <strong>Fond de plan :</strong>
      <div class="form-check form-switch">
        <input class="form-check-input" type="checkbox" role="switch" id="orthoCheckbox">
        <label class="form-check-label" for="orthoCheckbox">Photos aériennes</label>
      </div>
    `;
    map.getContainer().appendChild(mapMenuDiv);

    document.getElementById('orthoCheckbox').addEventListener('change', function (e) {
      e.preventDefault();
      e.stopPropagation();
      toggleStyle(this.checked);
    });
  });
};


```


## Column {.tabset width="40%"}

### Tableau de données {.flow}

#### Row

```{r}
#| echo: false
#| message: false
#| warning: false
#| expandable: false

library(sf)
library(dplyr)
library(reactable)
library(tidyr)

# Charger et transformer les données
indicateur_s27a <- st_read("layers/indicateurs.geojson", quiet = TRUE) %>%
  mutate(s27a = replace_na(s27a, 0)) %>%
  st_drop_geometry() %>%
  select(insee_com, nom, population, s27a) %>%
  rename(
    Commune = nom,
    `Code INSEE` = insee_com,
    Population = population,
    `Dommages financiers causés aux entreprises en €` = s27a
  ) %>%
 mutate(
    Population = format(Population, big.mark = " ", scientific = FALSE),
    `Dommages financiers causés aux entreprises en €` = format(`Dommages financiers causés aux entreprises en €`, big.mark = " ", scientific = FALSE)
  )

# Afficher avec reactable
reactable(indicateur_s27a,
          filterable = TRUE,
          striped = TRUE,
          sortable = TRUE,
          resizable = TRUE,
          pagination = TRUE,
          defaultPageSize = 10,
          highlight = TRUE,
          theme = reactableTheme(
            borderColor = "#E0E0E0",
            stripedColor = "#f5f5f5",
            highlightColor = "#7591e5",
            cellPadding = "8px 12px",
            style = list(fontSize = "14px", fontFamily = "sans-serif")
          ))

```

### Graphiques {.flow}

#### Row

```{r}
#| echo: false
#| message: false
#| warning: false
library(sf)
library(dplyr)
library(jsonlite)

# Charger le GeoJSON
indicateurs <- st_read("layers/indicateurs.geojson", quiet = TRUE) %>%
  st_drop_geometry() %>%
  select(nom, s27a) %>%
  filter(!is.na(s27a))

# Sauvegarder au format JSON dans le dossier _site
write_json(indicateurs, "layers/data_s27a.json", auto_unbox = TRUE)
```

```{ojs}
//| echo: false
//| padding: 5px
//| expandable: false

import { Plot } from "@observablehq/plot";
import { Inputs } from "@observablehq/inputs";

// Charger les données
data = FileAttachment("layers/data_s27a.json").json()

// Label du slider
html`<label for="slider-s27a" style="display: block;
  margin-top: 1em;
  font-weight: bold;
  margin-bottom: 1em;
  border: 1px solid rgba(0, 0, 0, 0.6);
  box-shadow: 0px 0px 8px 0px rgba(0, 0, 0, 0.8);
  border-radius: 8px;
  padding: 5px;
  text-align: center;
  margin-right: 20%;
  margin-left: 20%;">
  Dommages financiers causés aux entreprises (€)
</label>`

// Slider
viewof slider = Inputs.range(
  [0, 6000000], 
  {
    value: 3000000,
    step: 100000,
    id: "slider-s27a"
  }
)

// Espace avant le graphique
html`<div style="margin-top: 30px;"></div>`

// Données filtrées et triées
    sorted = data
      .map(d => ({
        ...d,
        s27a: isNaN(+d.s27a) ? 0 : +d.s27a  // attrape null, undefined, "", "NaN", etc.
      }))
      .filter(d => d.s27a <= slider)
      .sort((a, b) => a.s27a - b.s27a)



// Graphique
Plot.plot({
  marks: [
    Plot.barY(sorted, {
      x: d => d.nom,
      y: d => d.s27a,
      fill: d => {
        const val = d.s27a;
        if (val === 0) return "#d9d9d9";        // null ou 0
        if (val < 150000) return "#f9f0d9";
        if (val < 500000) return "#fdb77a";
        if (val < 2000000) return "#ec603F";
        return "#b30000";
      }
 
    }),
    Plot.text(sorted, {
      x: d => d.nom,
      y: d => d.s27a,
      text: d => d.s27a.toLocaleString("fr-FR"),
      dy: -8,
      fontSize: 9,
      fill: "black",
      textAnchor: "middle"
    })
  ],
  y: {
    grid: true,
    label: "Montant (€)",
    domain: [0, Math.max(...sorted.map(d => d.s27a))],
    tickFormat: d => d.toLocaleString("fr-FR", { maximumFractionDigits: 0 })
  },
  x: {
    label: "Commune",
    tickRotate: -45,
    labelAnchor: "right"
  },
  style: {
    fontSize: "11px",
    fontFamily: "sans-serif",
    fontWeight: "bold"
  },
  width: window.innerWidth * 0.95,
  height: window.innerHeight * 0.65,
  marginBottom: 120,
  marginTop: 50,
  marginLeft: 80  // ← solution au texte tronqué
})

```

# Informations relatives à l'indicateur {.flow}
---
title: "Carte Intercative"
lang: fr
back-to-top-navigation: false
format:
  dashboard:
    orientation: columns
    #page-layout: full
    
resources:
  - Images/icons/*.svg
  - layers/data_s114e.json
  - layers/bati_vienne.geojson
    
include-in-header:
  text: |
    <script src="js/maplibre.js"></script>
    <link href="js/maplibre.css" rel="stylesheet">
    <script src="js/jquery_3.5.min.js" type="text/javascript"></script>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" rel="stylesheet">
    
    <link rel="stylesheet" href="js/photon-geocoder-autocomplete.min.css" type="text/css">
    <script src="js/photon-geocoder-autocomplete.min.js" type="text/javascript"></script>
---

##  {.sidebar}

```{=html}
<div id="nav-menu-objectif-n°1"></div>
```

```{ojs}
//| echo: false
//| output: false
bbox_sru = FileAttachment("layers/bb.json").json()
```

```{=html}
<div style="color:#dc7633; text-align:inherit !important; font-size:1.3em; font-weight:bold; font-family: calibri;margin-bottom:10%;">
 Nombre d’enjeux utiles à la gestion de crise susceptibles de dysfonctionner
 </div>

<div style="text-align:inherit !important; font-size:1.1em; font-family: calibri;margin-bottom:10%;"> Les dispositifs de gestion de crise s’appuient sur des enjeux potentiellement vulnérables : mairie, salles polyvalentes, salles d’accueil, casernes de pompiers, gendarmeries, centres d’exploitation …. Il s’agit d’évaluer si ces bâtiments sont exposés à l’inondation.</div>


<a href=https://fiches.eptb-vienne.fr/ind_114e.pdf target=_blank><i class="fa fa-exclamation-circle"></i> Télécharger la fiche indicateur et la carte</a> 


<div style="width: auto; padding:5px; border: 1px solid #A0A0A0; border-radius:15px; text-align: center !important; background: #F2F2F2; font-size:1.1em;margin-top:10%;">
La zone inondable correspond à l'aléa centennal construit à partir des données disponibles et notamment réglementaires mais en aucun cas ne se substitue aux documents réglementaires en vigueur.
</div>
```

```{r}
#| echo: false
library(sf)
library(dplyr)
library(jsonlite)

# Charger le GeoJSON
indicateurs <- st_read("layers/indicateurs.geojson", quiet = TRUE) %>%
  st_drop_geometry() %>%
  select(nom, s114e) %>%
  filter(!is.na(s114e))

# Sauvegarder au format JSON dans le dossier _site
write_json(indicateurs, "layers/data_s114e.json", auto_unbox = TRUE)
```

# Cartographie

## Column {width="60%"}

```{ojs}
//| echo: false
//| output: false

bassin_vienne = FileAttachment("layers/bassin_vienne.geojson").json();
departement = FileAttachment("layers/departement.geojson").json();
region = FileAttachment("layers/region.geojson").json();
epci = FileAttachment("layers/epci.geojson").json();
perimetre = FileAttachment("layers/perimetre.json").json();
slgri = FileAttachment("layers/slgri.json").json();
tri = FileAttachment("layers/tri.json").json();
zone_inondable = FileAttachment("layers/zone_inondable.geojson").json();
indicateurs = FileAttachment("layers/indicateurs.json").json();
cours_d_eau = FileAttachment("layers/cours_d_eau.geojson").json();
indicateursGeojson = FileAttachment("layers/indicateurs.geojson").json();
batiments = FileAttachment("layers/bati_vienne.geojson").json();

```

```{ojs}
//| echo: false
//| padding: 0px
//| expandable: false
//| fill: true


map = {
  const container = html`<div class="map-container" id="map" style="height: 665px; width: 100%;"></div>`;
  yield container;

  <!-- const sourcePlanIGN = { -->
  <!--   style: 'normal', -->
  <!--   format: 'image/png', -->
  <!--   layer: 'GEOGRAPHICALGRIDSYSTEMS.PLANIGNV2' -->
  <!-- }; -->

  const sourceOrtho = {
    style: 'normal',
    format: 'image/jpeg',
    layer: 'HR.ORTHOIMAGERY.ORTHOPHOTOS'
  };
  
  const sourceOSM = {
    tiles: 'https://tile.openstreetmap.org/{z}/{x}/{y}.png',
    attribution: '© <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
    minzoom: 0,
    maxzoom: 19
  };

  const map = new maplibregl.Map({
    container: container,
    style: 'https://basemaps.cartocdn.com/gl/voyager-gl-style/style.json',
    <!-- center: [-0.04, 46.3051],  -->
    zoom: 11
  });

  map.addControl(new maplibregl.FullscreenControl(), 'top-right');
  map.addControl(new maplibregl.NavigationControl({ visualizePitch: true }), 'top-left');
  map.addControl(new maplibregl.ScaleControl({ maxWidth: 80, unit: 'metric' }));
  

  const toggleStyle = (useOrtho) => {
    if (useOrtho) {
      map.setLayoutProperty('orthoIGN', 'visibility', 'visible');
      map.setLayoutProperty('OSM', 'visibility', 'none');
    } else {
      map.setLayoutProperty('orthoIGN', 'visibility', 'none');
      map.setLayoutProperty('OSM', 'visibility', 'visible');
    }
  };

  map.on('load', () => {
    map.fitBounds(
    [
      [-0.04, 46.3051],   // Sud-Ouest
      [0.7741, 46.8565]   // Nord-Est
    ],
    {
      padding: 20,
      linear: true,
      duration: 0
    }
  );
    // Ajout des fonds raster IGN
    <!-- map.addSource('raster-planign', { -->
    <!--   type: 'raster', -->
    <!--   tiles: [ -->
    <!--     `https://data.geopf.fr/wmts?SERVICE=WMTS&style=${sourcePlanIGN.style}&VERSION=1.0.0&REQUEST=GetTile&format=${sourcePlanIGN.format}&layer=${sourcePlanIGN.layer}&tilematrixset=PM&TileMatrix={z}&TileCol={x}&TileRow={y}` -->
    <!--   ], -->
    <!--   tileSize: 256, -->
    <!--   attribution: '© <a href="https://www.ign.fr/">IGN</a>', -->
    <!--   minzoom: 0, -->
    <!--   maxzoom: 22 -->
    <!-- }); -->

    map.addSource('raster-ortho', {
      type: 'raster',
      tiles: [
        `https://data.geopf.fr/wmts?SERVICE=WMTS&style=${sourceOrtho.style}&VERSION=1.0.0&REQUEST=GetTile&format=${sourceOrtho.format}&layer=${sourceOrtho.layer}&tilematrixset=PM&TileMatrix={z}&TileCol={x}&TileRow={y}`
      ],
      tileSize: 256,
      attribution: '© <a href="https://www.ign.fr/">IGN</a>',
      minzoom: 0,
      maxzoom: 22
    });

    map.addSource('raster-osm', {
  type: 'raster',
  tiles: [
    'https://tile.openstreetmap.org/{z}/{x}/{y}.png'
  ],
  tileSize: 256,
  attribution:
    '© <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
  minzoom: 0,
  maxzoom: 19
    });

    <!-- map.addLayer({ -->
    <!--   id: 'planIGN', -->
    <!--   type: 'raster', -->
    <!--   source: 'raster-planign', -->
    <!--   layout: { visibility: 'visible' } -->
    <!-- }); -->

    map.addLayer({
      id: 'orthoIGN',
      type: 'raster',
      source: 'raster-ortho',
      layout: { visibility: 'none' }
    });

    map.addLayer({
      id: 'OSM',
      type: 'raster',
      source: 'raster-osm',
      layout: { visibility: 'visible' } // tu peux le laisser caché au départ si tu veux le basculer ensuite
    });
              
    
    const layersData = [
      { data: bassin_vienne, type: 'line', id: 'bassinvienneLayer', color: 'green', layout: {visibility:'none'}},
      { data: region, type: 'line', id: 'regionLayer', color: 'red', layout: {visibility:'none'} },
      { data: departement, type: 'line', id: 'departementLayer', color: '#a772b9', width: 2,  layout:{visibility:'none'}},
      { data: epci, type: 'line', id: 'epciLayer', color: '#567ae3', layout: {visibility:'none'} },
      {  data: indicateursGeojson, // GeoJSON contenant une propriété 's31atx'
          type: 'fill',
          id: 'indicateurs114eLayer',
          opacity: 0.9,
          width: 1,
          dynamicColor: { 
            property: 's114e',
            // La logique exacte de la légende à appliquer :
            // - 0 ou null => #d9d9d9
            // - < 150     => #f9f0d9
            // - < 500000  => #fdb77a
            // - < 2000000 => #ec603F
            // - >= 2000000 => #b30000
            mapping: {
              '0': '#d9d9d9',
              '1': '#f58756'
            },
            default: '#d9d9d9' // utilisé si null, undefined ou < 150
          },
          layout: { visibility: 'visible' }
        },
      { data: zone_inondable, type: 'fill', id: 'zoneinondableLayer', color: '#b4c3ef' , width: 2, opacity: 1, 
      layout: {visibility:'visible'} },
      { data: batiments, type: 'fill', id: 'batimentsLayer', color: 'green', width:2, opacity: 1,
      layout: {visibility:'none'}}
      
    ];
    
    // Créer le conteneur
        const legend = document.createElement('div');
        legend.id = 'legend';
        legend.style.position = 'absolute';
        legend.style.top = '82%';
        legend.style.right = '10px';
        legend.style.transform = 'translateY(-50%)';
        legend.style.background = 'white';
        legend.style.padding = '10px';
        legend.style.fontSize = '12px';
        legend.style.borderRadius = '4px';
        legend.style.boxShadow = '0 1px 4px rgba(0,0,0,0.3)';
        legend.style.zIndex = '1'; // pour passer au-dessus de la carte
        
        // Contenu de la légende
        legend.innerHTML = `
          <strong>Nombre d'enjeux utiles <br> à la gestion de crise</strong><br>
          <div><span style="background:#d9d9d9;width:12px;height:12px;display:inline-block;margin-right:5px;"></span> 0</div>
          <div><span style="background:#f58756;width:12px;height:12px;display:inline-block;margin-right:5px;border:1px solid #ccc;"></span> 1</div>
        `;
        
        // L’ajouter à la carte (le container MapLibre)
        map.getContainer().appendChild(legend);
        
        //afin de lier la légende à l'indicateur
        function updateLegendVisibility() {
        const visibility = map.getLayoutProperty('indicateurs114eLayer', 'visibility');
        if (visibility === 'none') {
          legend.style.display = 'none';
        } else {
          legend.style.display = 'block';
        }
      }

        map.on('idle', updateLegendVisibility);
     
    // Ajout des couches vectorielles
      layersData.forEach(layer => {
        map.addSource(layer.id, {
          type: 'geojson',
          data: layer.data
        });
      
        const layerConfig = {
          id: layer.id,
          type: layer.type,
          source: layer.id,
          paint: {},
          layout: layer.layout
        };
      
        if (layer.type === 'fill') {
          if (layer.dynamicColor) {
            const prop = ['get', layer.dynamicColor.property];
            layerConfig.paint['fill-color'] = [
              'case',
              ['!', ['has', layer.dynamicColor.property]], '#d9d9d9',                       // Propriété absente
              ['any', ['==', ['get', layer.dynamicColor.property], null], ['==', ['get', layer.dynamicColor.property], 0]], '#d9d9d9', // null ou 0
              ['<=', ['get', layer.dynamicColor.property], 1], '#f58756',
              ['>=', ['get', layer.dynamicColor.property], 2], '#c359aa',
              '#d9d9d9' // fallback
            ];
          } else {
            layerConfig.paint['fill-color'] = layer.color || '#000000';
          }
        
          layerConfig.paint['fill-opacity'] = layer.opacity || 0.4;
          layerConfig.paint['fill-outline-color'] = '#000000';
        
        } else if (layer.type === 'line') {
          layerConfig.paint['line-color'] = layer.color || '#000000';
          layerConfig.paint['line-width'] = layer.width || 1;
        }

        map.addLayer(layerConfig);
        
         map.addLayer({
                  id: 'indicateurs114eLabels',
                  type: 'symbol',
                  source: 'indicateurs114eLayer', // le même id que ta source GeoJSON
                  layout: {
                    'text-field': ['get', 'nom'],
                    'text-size': 11,
                    'text-font': ['Open Sans Bold', 'Arial Unicode MS Bold'],
                    'text-offset': [0, 0.6],
                    'text-anchor': 'top'
                  },
                  paint: {
                    'text-color': '#000000',
                    'text-halo-color': '#ffffff',
                    'text-halo-width': 1
                  }
                });
                
        map.addLayer({
                 id: 'indicateurs114e-hover',
                 type: 'line',
                 source: 'indicateurs114eLayer', // même source
                 paint: {
                   'line-color': '#000',
                   'line-width': 2
                  },
                 filter: ['==', 'nom', ''] // vide au début
                  });
        
        
      map.on('click', 'indicateurs114eLayer', (e) => {
        const feature = e.features[0];
      
        const nom = feature.properties.nom || 'Non disponible';
      
        const population = feature.properties.population
          ? feature.properties.population.toLocaleString('fr-FR') + ' habitants'
          : 'Non disponible';
      
        const s114eValue = parseFloat(feature.properties.s114e);
        const dommages = !isNaN(s114eValue)
          ? s114eValue.toLocaleString('fr-FR')
          : 'Non disponible';
        const batimentsValue = feature.properties.nb_batiments;
        const batiments = !isNaN(parseFloat(batimentsValue))
          ? parseInt(batimentsValue).toLocaleString('fr-FR')
          : 'Non disponible';
        const batindif = feature.properties.nb_bat_indif?.toLocaleString('fr-FR');
        const batsportifValue = parseFloat(feature.properties.nb_bat_sportif);
        const batsportif = (!isNaN(batsportifValue) ? batsportifValue : 0).toLocaleString('fr-FR');
        const batagricolefValue = parseFloat(feature.properties.nb_bat_agricole);
        const batagricole = (!isNaN(batagricolefValue) ? batagricolefValue : 0).toLocaleString('fr-FR');
        const batresidentielValue = parseFloat(feature.properties.nb_bat_residentiel);
        const batresidentiel = (!isNaN(batresidentielValue) ? batresidentielValue : 0).toLocaleString('fr-FR');
        const batannexeValue = parseFloat(feature.properties.nb_bat_annexe);
        const batannexe = (!isNaN(batannexeValue) ? batannexeValue : 0).toLocaleString('fr-FR');
        const batreligieuxValue = parseFloat(feature.properties.nb_bat_religieux);
        const batreligieux = (!isNaN(batreligieuxValue) ? batreligieuxValue : 0).toLocaleString('fr-FR');
        const batindustrielValue = parseFloat(feature.properties.nb_bat_industriel);
        const batindustriel = (!isNaN(batindustrielValue) ? batindustrielValue : 0).toLocaleString('fr-FR');
        const batcommercialValue = parseFloat(feature.properties.nb_bat_commercial);
        const batcommercial = (!isNaN(batcommercialValue) ? batcommercialValue : 0).toLocaleString('fr-FR');
      
        const popupContent = `
        <style>
          .maplibregl-popup-content {
            padding: 4px !important;
            border: 1px solid;
            border-radius: 8px;
            width: max-content;
            box-shadow: rgba(101, 147, 220, 0.2) 0px 4px 8px 0px;
            border-color: rgba(101, 147, 220, 0.5);
          }
        </style>
          <div style="font-family: sans-serif; font-size: 13px; margin:10px;">
          <div style="background-color: #69774f; border: 1px solid; border-radius:8px; margin-bottom:16px; padding:10px; color:white;"><strong>
          <center>${nom}</center>
          </strong></div>
            <p style="margin:auto;"><strong>Population :</strong> ${population}</p>
            <p style="margin:auto;"><strong>Nombre d’enjeux utiles à la gestion <br> de crise susceptibles de dysfonctionner  :</strong> ${dommages}</p>
          </div>
        `;
      
      
        new maplibregl.Popup({closeButton: false})
          .setLngLat(e.lngLat)
          .setHTML(popupContent)
          .addTo(map);
          
          // Mettre à jour le conteneur HTML avec les informations spécifiques du marqueur 
         document.getElementById('donnees').innerHTML = `
         <strong style="font-size:1.1em"><i class="bi bi-geo-alt-fill"></i> Commune :</strong> ${nom}<br>
         <strong style="font-size:1.1em"><i class="bi bi-people-fill"></i> Nombre d'habitants :</strong>      ${population}<br>
         <strong style="font-size:1.1em"><i class="bi bi-house-fill"></i> Nombre de bâtiments :</strong> ${batiments}<br>
         <div style="margin-left:2vw;">Dont : </div>
         <li style="margin-left:4vw;"><h5 style="font-size:1em;"> ${batindif}<strong> bâtiments indifférenciés</strong></h5></li>
         <li style="margin-left:4vw;"><h5 style="font-size:1em;"> ${batsportif}<strong> bâtiments sportifs</strong></h5></li>
         <li style="margin-left:4vw;"><h5 style="font-size:1em;"> ${batagricole}<strong> bâtiments agricoles</strong></h5></li>
         <li style="margin-left:4vw;"><h5 style="font-size:1em;"> ${batresidentiel}<strong> bâtiments résidentiels</strong></h5></li>
         <li style="margin-left:4vw;"><h5 style="font-size:1em;"> ${batannexe}<strong> bâtiments annexes</strong></h5></li>
         <li style="margin-left:4vw;"><h5 style="font-size:1em;"> ${batreligieux}<strong> bâtiments religieux</strong></h5></li>
         <li style="margin-left:4vw;"><h5 style="font-size:1em;"> ${batindustriel}<strong> bâtiments industriels</strong></h5></li>
         <li style="margin-left:4vw;"><h5 style="font-size:1em;"> ${batcommercial}<strong> bâtiments commerciaux</strong></h5></li>
         
         <div>Conséquences de l'aléa :</div>
         <strong style="font-size:1.1em"><i class="bi bi-building"></i> Nombre d’enjeux utiles à la gestion de crise susceptibles de dysfonctionner  :</strong> ${dommages}<br>
         `;
      });



      map.on('mousemove', 'indicateurs114eLayer', (e) => {
        if (e.features.length > 0) {
          const nomCommune = e.features[0].properties.nom;
      
          map.setFilter('indicateurs114e-hover', ['==', 'nom', nomCommune]);
      
          map.getCanvas().style.cursor = 'pointer';
        }
      });

        map.on('mouseleave', 'indicateurs114eLayer', () => {
          map.setFilter('indicateurs114e-hover', ['==', 'nom', '']);
          map.getCanvas().style.cursor = '';
        });
      });


    // Interface de contrôle des couches
    const mapLayersDiv = document.createElement('div');
    mapLayersDiv.classList.add('mapLayers');
    mapLayersDiv.style.position = 'absolute';
    mapLayersDiv.style.zIndex = '1000';
    mapLayersDiv.innerHTML = `
      <button id="toggleMapMenuButton" class="btn btn-light aria-label="Afficher les couches" title="Afficher les couches">
        <img src="Images/icons/layers-half.svg" alt="Icône SVG" width="25" height="25">
      </button>
      <div id="layersList" style="display: none; background: white; padding: 10px; border: 1px solid #ccc;"></div>
    `;
    map.getContainer().appendChild(mapLayersDiv);

    const toggleableLayerIds = layersData.map(layer => layer.id);
    const aliasLayerIds = {
      bassinvienneLayer: 'Bassin de la Vienne',
      regionLayer: 'Région',
      departementLayer: 'Département',
      epciLayer: 'Etablissement Public de Coopération Intercommunale',
      zoneinondableLayer: 'Zonage Inondable',
      indicateurs114eLayer: "Nombre d'enjeux sensibles à la gestion de crise",
      batimentsLayer: "Bâtiments"
    };

    function toggleLayerVisibility(id, visible) {
      const visibility = visible ? 'visible' : 'none';
      if (map.getLayer(id)) {
        map.setLayoutProperty(id, 'visibility', visibility);
      }
    }

    const layersListDiv = mapLayersDiv.querySelector('#layersList');
    
    toggleableLayerIds.forEach(id => {
      const name = aliasLayerIds[id] || id;

      const checkbox = document.createElement('input');
      checkbox.type = 'checkbox';
      checkbox.id = id;
      checkbox.className = 'form-check-input';
      
      // ✅ Lire la visibilité actuelle directement dans la carte
      map.once('idle', () => {
        const visibility = map.getLayoutProperty(id, 'visibility');
        checkbox.checked = visibility === 'visible';
      });
  
      checkbox.addEventListener('change', () => toggleLayerVisibility(id, checkbox.checked));

      const label = document.createElement('label');
      label.htmlFor = id;
      label.className = 'form-check-label';
      label.innerText = name;

      const wrapper = document.createElement('div');
      wrapper.className = 'form-check';
      wrapper.appendChild(checkbox);
      wrapper.appendChild(label);

      layersListDiv.appendChild(wrapper);
    });

    document.getElementById('toggleMapMenuButton').addEventListener('click', () => {
      layersListDiv.style.display = layersListDiv.style.display === 'none' ? 'block' : 'none';
    });
     

    // Menu bascule fond de plan
    const mapMenuDiv = document.createElement('div');
    mapMenuDiv.classList.add('mapFondDePlan');
    mapMenuDiv.style.position = 'absolute';
    mapMenuDiv.style.zIndex = '1000';
    mapMenuDiv.innerHTML = `
      <strong>Fond de plan :</strong>
      <div class="form-check form-switch">
        <input class="form-check-input" type="checkbox" role="switch" id="orthoCheckbox">
        <label class="form-check-label" for="orthoCheckbox">Photos aériennes</label>
      </div>
    `;
    map.getContainer().appendChild(mapMenuDiv);

    document.getElementById('orthoCheckbox').addEventListener('change', function (e) {
      e.preventDefault();
      e.stopPropagation();
      toggleStyle(this.checked);
    });
  });
};


```

## Column {.tabset width="40%"}

### Données de la commune {.flow}

#### Row

```{ojs}
//| echo: false
//| padding: 5px
//| expandable: false
md`
<div id="donnees" style="font-family: Arial, sans-serif; font-size: 16px; line-height: 1.5; margin-top:1%;">
    Cliquez sur une commune pour voir les informations ici.<br>
</div>

`


```

### Tableau de données {.flow}

#### Row

```{r}
#| echo: false
#| message: false
#| warning: false
#| expandable: false

library(sf)
library(dplyr)
library(reactable)
library(tidyr)

indicateur_s114e <- st_read("layers/indicateurs.geojson", quiet = TRUE) %>%
  select(insee_com, nom, population, s114e) %>%
  mutate(
    s114e = replace_na(s114e, 0)
  ) %>%
  st_drop_geometry() %>%
  rename(
    Commune = nom,
    `Code INSEE` = insee_com,
    Population = population,
    `Nombre d’enjeux utiles à la gestion de crise susceptibles de dysfonctionner` = s114e
  ) %>%
  mutate(
    Population = format(Population, big.mark = " ", scientific = FALSE),
    `Nombre d’enjeux utiles à la gestion de crise susceptibles de dysfonctionner` = format(`Nombre d’enjeux utiles à la gestion de crise susceptibles de dysfonctionner`, big.mark = " ", scientific = FALSE)
  )

# Affichage avec reactable
reactable(indicateur_s114e,
          filterable = TRUE,
          striped = TRUE,
          sortable = TRUE,
          resizable = TRUE,
          pagination = TRUE,
          defaultPageSize = 10,
          highlight = TRUE,
          theme = reactableTheme(
            borderColor = "#E0E0E0",
            stripedColor = "#f5f5f5",
            highlightColor = "#7591e5",
            cellPadding = "8px 12px",
            style = list(fontSize = "14px", fontFamily = "sans-serif")
          ))


```

### Graphiques {.flow}

#### Row

```{ojs}
//| echo: false
//| padding: 5px
//| expandable: false

import { Plot as PlotTaux } from "@observablehq/plot";
import { Inputs as InputsTaux } from "@observablehq/inputs";

// Charger les données
data = FileAttachment("layers/data_s114e.json").json()

// Label du slider
html`<label for="slider-s114e" style="display: block;
  margin-top: 1em;
  font-weight: bold;
  margin-bottom: 1em;
  border: 1px solid rgba(0, 0, 0, 0.6);
  box-shadow: 0px 0px 8px 0px rgba(0, 0, 0, 0.8);
  border-radius: 8px;
  padding: 5px;
  text-align: center;
  margin-right: 20%;
  margin-left: 20%;">
  Nombre d’enjeux utiles à la gestion de crise susceptibles de dysfonctionner
</label>`

// Slider


data_s114e = FileAttachment("layers/data_s114e.json").json()

viewof slider_s114e = InputsTaux.range([0, 1], {
  value: 1,
  step: 1,
  label: "Nombre d’enjeux utiles à la gestion de crise susceptibles de dysfonctionner"
})

sorted_s114e = data_s114e
  .map(d => ({ ...d, s114e: +d.s114e || 0 }))
  .filter(d => d.s114e <= slider_s114e)
  .sort((a, b) => a.s114e - b.s114e)

PlotTaux.plot({
  marks: [
    PlotTaux.barY(sorted_s114e, {
      x: d => d.nom,
      y: d => d.s114e,
        fill: d => {
        const val = d.s114e;
        if (val === 0) return "#cdcdcd";
        if (val > 0 && val <= 1) return "#f58756";
        if (val > 1 && val <= 2) return "#fca487";
        if (val > 2 && val <= 4) return "#c359aa";
        return "#67000d"; // >4
      }
    }),
    PlotTaux.text(sorted_s114e, {
      x: d => d.nom,
      y: d => d.s114e,
      text: d => d.s114e.toLocaleString("fr-FR"),
      dy: -8,
      fontSize: 9,
      fill: "black",
      textAnchor: "middle"
    })
  ],
  y: {
    grid: true,
    label: "Nombre",
    domain: [0, Math.max(...sorted_s114e.map(d => d.s114e))],
    tickFormat: d => d.toLocaleString("fr-FR", { maximumFractionDigits: 0 })
  },
  x: {
    label: "Commune",
    tickRotate: -45,
    labelAnchor: "right"
  },
  style: {
    fontSize: "11px",
    fontFamily: "sans-serif",
    fontWeight: "bold"
  },
  width: window.innerWidth * 0.95,
  height: window.innerHeight * 0.65,
  marginBottom: 120,
  marginTop: 50,
  marginLeft: 80
})
```

# Informations relatives à l'indicateur {.flow}

```{ojs}
//| echo: false
//| padding: 5px
//| expandable: false
md`

<table style="width:90%; border-collapse: collapse; border:1px solid; text-align:center; margin:auto;">
  <colgroup>
    <col style="width:20%;">
    <col style="width:20%;">
    <col style="width:20%;">
    <col style="width:20%;">
    <col style="width:20%;">
  </colgroup>
  <tr>
    <th style="background-color:#F0D795; border:1px solid;" colspan="2">Numéro d'indicateur</th>
    <th style="border:1px solid;">Ind1/14e</th>
    <th style="background-color:#F0D795; border:1px solid;">Date de mise à jour</th>
    <th style="border:1px solid;">31/05/2025</th>
  </tr>
  <tr>
    <td colspan="2" style="background-color:#F0D795; border:1px solid; font-weight: bold;">Intitulé</td>
    <td colspan="3" style="border:1px solid;">Nombre d’enjeux utiles à la gestion de crise susceptibles de dysfonctionner</td>
  </tr>
  <tr>
    <td colspan="2" style="background-color:#F0D795; border:1px solid; font-weight: bold;">Objectif de la SNGRI</td>
    <td colspan="3" style="border:1px solid;">Objectif n°1 : Augmenter la sécurité des populations exposées</td>
  </tr>
  <tr>
    <td colspan="2" style="background-color:#F0D795; border:1px solid; font-weight: bold;">Axe de vulnérabilité</td>
    <td colspan="3" style="border:1px solid;">Axe 1/4 Le manque de préparation à la crise</td>
  </tr>
  <tr>
    <td colspan="2" style="background-color:#F0D795; border:1px solid; font-weight: bold;">Source de vulnérabilité</td>
    <td colspan="3" style="border:1px solid;">S1/14 Préparation collective à la crise</td>
  </tr>
</table>

<br>

<table style="width:90%; border-collapse: collapse; border:1px solid; text-align:center; margin:auto;">
  <colgroup>
    <col style="width:20%;">
    <col style="width:20%;">
    <col style="width:20%;">
    <col style="width:20%;">
    <col style="width:20%;">
  </colgroup>
  <tr>
    <td colspan="2" style="background-color:#F0D795; border:1px solid; font-weight: bold;">Modalités du calcul</td>
    <td colspan="3" style="border:1px solid;">À partir de la couche « zones d’activité ou d’intérêt » de la BDTOPO, on a sélectionné les
objets qui présentent un enjeu pour la gestion du territoire (Caserne de pompiers,
Gendarmerie, Mairie, Sous-préfecture) qui intersectent la zone inondable.
Un décompte par commune du nombre d’établissements est réalisé.</td>
  </tr>
  <tr>
    <td colspan="2" style="background-color:#F0D795; border:1px solid; font-weight: bold;">Échelle de représentation</td>
    <td colspan="3" style="border:1px solid;">Communale</td>
  </tr>
  <tr>
    <td colspan="2" style="background-color:#F0D795; border:1px solid; font-weight: bold;">Points de vigilance</td>
    <td colspan="3" style="border:1px solid;">Les sites sont issus de la BD TOPO. On peut utiliser si possible d’autres bases plus précises et plus exhaustives (par exemple, bases de connaissance du SDIS).</td>
  </tr>
  <tr>
    <td colspan="2" style="background-color:#F0D795; border:1px solid; font-weight: bold;">Table cible</td>
    <td colspan="3" style="border:1px solid;">p_obj1_securite_personnes.s114e_enjeux_gestion_crise_zi</td>
  </tr>
  <tr>
  <tr>
    <td colspan="2" style="background-color:#F0D795; border:1px solid; font-weight: bold;">Variables mobilisées</td>
    <td colspan="3" style="border:1px solid;">Zx : zone inondable,
Ap6 : enjeux utiles à la gestion de crise</td>
  </tr>
  <tr>
  <tr>
    <td colspan="2" style="background-color:#F0D795; border:1px solid; font-weight: bold;">Indicateur commun SLGRI Vienne/Clain</td>
    <td colspan="3" style="border:1px solid;">non</td>
  </tr>
  <tr>
</table>

<br>

<table style="width:90%; border-collapse: collapse; border:1px solid; text-align:center; margin:auto;">
  <colgroup>
    <col style="width:10%;">
    <col style="width:10%;">
    <col style="width:10%;">
    <col style="width:10%;">
    <col style="width:10%;">
    <col style="width:10%;">
    <col style="width:10%;">
    <col style="width:10%;">
    <col style="width:10%;">
    <col style="width:10%;">
  </colgroup>

  <tr>
    <td colspan="10" style="background-color:#F0D795; border:1px solid; font-weight: bold;">Données sources</td>
  </tr>
  <tr>
    <th style="background-color:#F0D795; border:1px solid;" colspan="2">Désignation</th>
    <th style="background-color:#F0D795; border:1px solid;">Millésime</th>
    <th style="background-color:#F0D795; border:1px solid;">Nationale/locale</th>
    <th style="background-color:#F0D795; border:1px solid;">Format</th>
    <th style="background-color:#F0D795; border:1px solid;">Type</th>
    <th style="background-color:#F0D795; border:1px solid;" colspan="2">Producteur</th>
    <th style="background-color:#F0D795; border:1px solid;" colspan="2">Nom fichier</th>
  </tr>
  <tr>
    <td colspan="2" style="border:1px solid;">Zone inondable</td>
    <td style="border:1px solid;">2019</td>
    <td style="border:1px solid;">Locale</td>
    <td style="border:1px solid;">Shape</td>
    <td style="border:1px solid;">Polygone</td>
    <td colspan="2" style="border:1px solid;">Cerema</td>
    <td colspan="2" style="border:1px solid;">Zx_zone_inondable.shp</td>
  </tr>
  <tr>
    <td colspan="2" style="border:1px solid;">Zones d’activité ou d’intérêt BD TOPO</td>
    <td style="border:1px solid;">2020</td>
    <td style="border:1px solid;">Nationale</td>
    <td style="border:1px solid;">Shape</td>
    <td style="border:1px solid;">Polygone</td>
    <td colspan="2" style="border:1px solid;">IGN</td>
    <td colspan="2" style="border:1px solid;">Zone_d_activite_ou_d_interet.shp</td>
  </tr>
  <tr>
    <td colspan="2" style="border:1px solid;">Communes (BDTOPO)</td>
    <td style="border:1px solid;">2020</td>
    <td style="border:1px solid;">Nationale</td>
    <td style="border:1px solid;">Shape</td>
    <td style="border:1px solid;">Polygone</td>
    <td colspan="2" style="border:1px solid;">IGN</td>
    <td colspan="2" style="border:1px solid;">Commune.shp</td>
  </tr>
</table>


`
```

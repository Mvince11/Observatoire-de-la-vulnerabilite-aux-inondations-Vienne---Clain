---
title: "Carte Intercative"
lang: fr
back-to-top-navigation: false
format:
  dashboard:
    orientation: columns
    #page-layout: full
    
resources:
  - Images/icons/*.svg
  - layers/data_s12a.json
    
include-in-header:
  text: |
    <script src="js/maplibre.js"></script>
    <link href="js/maplibre.css" rel="stylesheet">
    <script src="js/jquery_3.5.min.js" type="text/javascript"></script>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" rel="stylesheet">
    
    <link rel="stylesheet" href="js/photon-geocoder-autocomplete.min.css" type="text/css">
    <script src="js/photon-geocoder-autocomplete.min.js" type="text/javascript"></script>
---


##  {.sidebar}
```{=html}
<div id="nav-menu-objectif-n°1"></div>
```

```{ojs}
//| echo: false
//| output: false
bbox_sru = FileAttachment("layers/bb.json").json()
```

```{=html}
<div style="color:#dc7633; text-align:inherit !important; font-size:1.3em; font-weight:bold; font-family: calibri;margin-bottom:10%;">
 Nombre de personnes occupant des bâtiments (logements et activités) de plain-pied fortement inondables (plus de 1,5 m d’eau) 
 </div>

<div style="text-align:inherit !important; font-size:1.1em; font-family: calibri;margin-bottom:10%;"> Le niveau des eaux peut monter relativement vite pour piéger des personnes dans des locaux ne disposant pas d’un accès vers un étage refuge. Dans les locaux où la hauteur d’eau peut être importante (supérieure à 1,5m), cela représente un danger. </div>


<a href=https://fiches.eptb-vienne.fr/ind_12a.pdf target=_blank><i class="fa fa-exclamation-circle"></i> Télécharger la fiche indicateur et la carte</a> 


<div style="width: auto; padding:5px; border: 1px solid #A0A0A0; border-radius:15px; text-align: center !important; background: #F2F2F2; font-size:1.1em;margin-top:10%;">
La zone inondable correspond à l'aléa centennal construit à partir des données disponibles et notamment réglementaires mais en aucun cas ne se substitue aux documents réglementaires en vigueur.
</div>
```
# Cartographie

## Column {width="60%"}

```{ojs}
//| echo: false
//| output: false

bassin_vienne = FileAttachment("layers/bassin_vienne.geojson").json();
departement = FileAttachment("layers/departement.geojson").json();
region = FileAttachment("layers/region.geojson").json();
epci = FileAttachment("layers/epci.geojson").json();
perimetre = FileAttachment("layers/perimetre.json").json();
slgri = FileAttachment("layers/slgri.json").json();
tri = FileAttachment("layers/tri.json").json();
zone_inondable = FileAttachment("layers/zone_inondable.geojson").json();
indicateurs = FileAttachment("layers/indicateurs.json").json();
cours_d_eau = FileAttachment("layers/cours_d_eau.geojson").json();
indicateursGeojson = FileAttachment("layers/indicateurs.geojson").json();


```

```{ojs}
//| echo: false
//| padding: 0px
//| expandable: false
//| fill: true


map = {
  const container = html`<div class="map-container" id="map" style="height: 665px; width: 100%;"></div>`;
  yield container;

  const sourcePlanIGN = {
    style: 'normal',
    format: 'image/png',
    layer: 'GEOGRAPHICALGRIDSYSTEMS.PLANIGNV2'
  };

  const sourceOrtho = {
    style: 'normal',
    format: 'image/jpeg',
    layer: 'HR.ORTHOIMAGERY.ORTHOPHOTOS'
  };

  const map = new maplibregl.Map({
    container: container,
    style: 'https://basemaps.cartocdn.com/gl/voyager-gl-style/style.json',
    <!-- center: [-0.04, 46.3051],  -->
    zoom: 11
  });

  map.addControl(new maplibregl.FullscreenControl(), 'top-right');
  map.addControl(new maplibregl.NavigationControl({ visualizePitch: true }), 'top-left');
  map.addControl(new maplibregl.ScaleControl({ maxWidth: 80, unit: 'metric' }));
  

  const toggleStyle = (useOrtho) => {
    if (useOrtho) {
      map.setLayoutProperty('orthoIGN', 'visibility', 'visible');
      map.setLayoutProperty('planIGN', 'visibility', 'none');
    } else {
      map.setLayoutProperty('orthoIGN', 'visibility', 'none');
      map.setLayoutProperty('planIGN', 'visibility', 'visible');
    }
  };

  map.on('load', () => {
    map.fitBounds(
    [
      [-0.04, 46.3051],   // Sud-Ouest
      [0.7741, 46.8565]   // Nord-Est
    ],
    {
      padding: 20,
      linear: true,
      duration: 0
    }
  );
    // Ajout des fonds raster IGN
    map.addSource('raster-planign', {
      type: 'raster',
      tiles: [
        `https://data.geopf.fr/wmts?SERVICE=WMTS&style=${sourcePlanIGN.style}&VERSION=1.0.0&REQUEST=GetTile&format=${sourcePlanIGN.format}&layer=${sourcePlanIGN.layer}&tilematrixset=PM&TileMatrix={z}&TileCol={x}&TileRow={y}`
      ],
      tileSize: 256,
      attribution: '© <a href="https://www.ign.fr/">IGN</a>',
      minzoom: 0,
      maxzoom: 22
    });

    map.addSource('raster-ortho', {
      type: 'raster',
      tiles: [
        `https://data.geopf.fr/wmts?SERVICE=WMTS&style=${sourceOrtho.style}&VERSION=1.0.0&REQUEST=GetTile&format=${sourceOrtho.format}&layer=${sourceOrtho.layer}&tilematrixset=PM&TileMatrix={z}&TileCol={x}&TileRow={y}`
      ],
      tileSize: 256,
      attribution: '© <a href="https://www.ign.fr/">IGN</a>',
      minzoom: 0,
      maxzoom: 22
    });

    map.addLayer({
      id: 'planIGN',
      type: 'raster',
      source: 'raster-planign',
      layout: { visibility: 'visible' }
    });

    map.addLayer({
      id: 'orthoIGN',
      type: 'raster',
      source: 'raster-ortho',
      layout: { visibility: 'none' }
    });
    
    //fetch('layers/indicateurs.geojson')
     //.then(response => response.json())
     //.then(indicateursGeojson => { 
              
    
    const layersData = [
      { data: bassin_vienne, type: 'line', id: 'bassinvienneLayer', color: 'green', layout: {visibility:'none'}},
      { data: region, type: 'line', id: 'regionLayer', color: 'red', layout: {visibility:'none'} },
      { data: departement, type: 'line', id: 'departementLayer', color: '#a772b9', width: 2,  layout:{visibility:'none'}},
      { data: epci, type: 'line', id: 'epciLayer', color: '#567ae3', layout: {visibility:'none'} },
      { data: indicateursGeojson, // GeoJSON contenant une propriété 's12a' -->
        type: 'fill',
        id: 'indicateurs12aLayer',
        opacity: 0.9,
        width: 1,
        dynamicColor: { 
        property: 's12a',
        mapping: { 
           //'-1': '#f1eeed',
           //'0': '#ffffff', 
           '10': '#ffffff',
           '50': '#ffaaaa', 
           '100': '#ff5555'
          }, 
         default: '#d9d9d9'
        }
        , layout: {visibility:'visible'}
         },
      { data: zone_inondable, type: 'fill', id: 'zoneinondableLayer', color: '#b4c3ef' , width: 2, opacity: 1, 
      layout: {visibility:'visible'} }
      
    ];
     
    // Ajout des couches vectorielles
      layersData.forEach(layer => {
        map.addSource(layer.id, {
          type: 'geojson',
          data: layer.data
        });
      
        const layerConfig = {
          id: layer.id,
          type: layer.type,
          source: layer.id,
          paint: {},
          layout: layer.layout
        };
      
        if (layer.type === 'fill') {
          if (layer.dynamicColor) {
            const prop = ['get', layer.dynamicColor.property];
            layerConfig.paint['fill-color'] = [
              'case',
              ['!', ['has', layer.dynamicColor.property]], '#d9d9d9',                       // Propriété absente
              ['any', ['==', ['get', layer.dynamicColor.property], null], ['==', ['get', layer.dynamicColor.property], 0]], '#d9d9d9', // null ou 0
              ['<', ['get', layer.dynamicColor.property], 10], '#ffffff',
              ['<', ['get', layer.dynamicColor.property], 50], '#ffaaaa',
              ['<', ['get', layer.dynamicColor.property], 100], '#ff5555',
              ['>=', ['get', layer.dynamicColor.property], 100], '#ff0000',
              '#d9d9d9' // fallback
            ];
          } else {
            layerConfig.paint['fill-color'] = layer.color || '#000000';
          }
        
          layerConfig.paint['fill-opacity'] = layer.opacity || 0.4;
          layerConfig.paint['fill-outline-color'] = '#000000';
        
        } else if (layer.type === 'line') {
          layerConfig.paint['line-color'] = layer.color || '#000000';
          layerConfig.paint['line-width'] = layer.width || 1;
        }
      
      
        map.addLayer(layerConfig);
        
        map.addLayer({
                  id: 'indicateurs12aLabels',
                  type: 'symbol',
                  source: 'indicateurs12aLayer', // le même id que ta source GeoJSON
                  layout: {
                    'text-field': ['get', 'nom'],
                    'text-size': 11,
                    'text-font': ['Open Sans Bold', 'Arial Unicode MS Bold'],
                    'text-offset': [0, 0.6],
                    'text-anchor': 'top'
                  },
                  paint: {
                    'text-color': '#000000',
                    'text-halo-color': '#ffffff',
                    'text-halo-width': 1
                  }
                });

      
      map.on('click', 'indicateurs12aLayer', (e) => {
        const feature = e.features[0];
      
        const nom = feature.properties.nom || 'Non disponible';
        const population = feature.properties.population
        ? feature.properties.population.toLocaleString('fr-FR') + ' habitants'
        : 'Non disponible';
        const s12a = feature.properties.s12a || '0';
      
        const popupContent = `
        <style>
          .maplibregl-popup-content {
            padding: 4px !important;
            border: 1px solid;
            border-radius: 8px;
            width: 270px;
            box-shadow: rgba(101, 147, 220, 0.2) 0px 4px 8px 0px;
            border-color: rgba(101, 147, 220, 0.5);
          }
        </style>
           <div style="font-family: sans-serif; font-size: 13px; margin:10px;">
          <div style="background-color: #d1ee9c; border: 1px solid; border-radius:8px; margin-bottom:16px; padding:10px;"><strong>
          <center>${nom}</center>
          </strong></div>
          <p style="text-align:center !important"><strong>- Population :</strong> ${population}</p>
          <p style="text-align:center !important"><strong>- Nombre de personnes en zone fortement inondable :</strong> ${s12a}</p>
        `;
      
        new maplibregl.Popup({closeButton: false})
          .setLngLat(e.lngLat)
          .setHTML(popupContent)
          .addTo(map);
          
          // Mettre à jour le conteneur HTML avec les informations spécifiques du marqueur 
         document.getElementById('donnees').innerHTML = `
         <strong style="font-size:1.2em"><i class="bi bi-geo-alt-fill"></i> Commune :</strong> ${nom}<br>
         <strong style="font-size:1.2em"><i class="bi bi-people-fill"></i> Nombre d'habitants :</strong> ${population}<br>
         <strong style="font-size:1.2em"><i class="bi bi-droplet-half"></i> Nombre de personnes en zone fortement inondable :</strong> ${s12a}
         `;
      });


      map.on('mouseenter', 'indicateurs12aLayer', () => {
        map.getCanvas().style.cursor = 'pointer';
      });
      map.on('mouseleave', 'indicateurs12aLayer', () => {
        map.getCanvas().style.cursor = '';
      });
    });
    

    // Interface de contrôle des couches
    const mapLayersDiv = document.createElement('div');
    mapLayersDiv.classList.add('mapLayers');
    mapLayersDiv.style.position = 'absolute';
    mapLayersDiv.style.zIndex = '1000';
    mapLayersDiv.innerHTML = `
      <button id="toggleMapMenuButton" class="btn btn-light aria-label="Afficher les couches" title="Afficher les couches">
        <img src="Images/icons/layers-half.svg" alt="Icône SVG" width="25" height="25">
      </button>
      <div id="layersList" style="display: none; background: white; padding: 10px; border: 1px solid #ccc;"></div>
    `;
    map.getContainer().appendChild(mapLayersDiv);

    const toggleableLayerIds = layersData.map(layer => layer.id);
    const aliasLayerIds = {
      bassinvienneLayer: 'Bassin de la Vienne',
      regionLayer: 'Région',
      departementLayer: 'Département',
      epciLayer: 'EPCI',
      zoneinondableLayer: 'Zonage Inondable',
      indicateurs12aLayer: 'Bâtiments de plain-pied'
    };

    function toggleLayerVisibility(id, visible) {
      const visibility = visible ? 'visible' : 'none';
      if (map.getLayer(id)) {
        map.setLayoutProperty(id, 'visibility', visibility);
      }
    }

    const layersListDiv = mapLayersDiv.querySelector('#layersList');
    
    toggleableLayerIds.forEach(id => {
      const name = aliasLayerIds[id] || id;

      const checkbox = document.createElement('input');
      checkbox.type = 'checkbox';
      checkbox.id = id;
      checkbox.className = 'form-check-input';
      
      // ✅ Lire la visibilité actuelle directement dans la carte
      map.once('idle', () => {
        const visibility = map.getLayoutProperty(id, 'visibility');
        checkbox.checked = visibility === 'visible';
      });
  
      checkbox.addEventListener('change', () => toggleLayerVisibility(id, checkbox.checked));

      const label = document.createElement('label');
      label.htmlFor = id;
      label.className = 'form-check-label';
      label.innerText = name;

      const wrapper = document.createElement('div');
      wrapper.className = 'form-check';
      wrapper.appendChild(checkbox);
      wrapper.appendChild(label);

      layersListDiv.appendChild(wrapper);
    });

    document.getElementById('toggleMapMenuButton').addEventListener('click', () => {
      layersListDiv.style.display = layersListDiv.style.display === 'none' ? 'block' : 'none';
    });
     

    // Menu bascule fond de plan
    const mapMenuDiv = document.createElement('div');
    mapMenuDiv.classList.add('mapFondDePlan');
    mapMenuDiv.style.position = 'absolute';
    mapMenuDiv.style.zIndex = '1000';
    mapMenuDiv.innerHTML = `
      <strong>Fond de plan :</strong>
      <div class="form-check form-switch">
        <input class="form-check-input" type="checkbox" role="switch" id="orthoCheckbox">
        <label class="form-check-label" for="orthoCheckbox">Photos aériennes</label>
      </div>
    `;
    map.getContainer().appendChild(mapMenuDiv);

    document.getElementById('orthoCheckbox').addEventListener('change', function (e) {
      e.preventDefault();
      e.stopPropagation();
      toggleStyle(this.checked);
    });
  });
};


```

## Column {.tabset width="40%"}

### Données de la commune {.flow}
#### Row
```{ojs}
//| echo: false
//| padding: 5px
//| expandable: false
md`
<div id="donnees" style="font-family: Arial, sans-serif; font-size: 16px; line-height: 1.5; margin-top:1%;">
    Cliquez sur une commune pour voir les informations ici.<br>
</div>

`


```

### Tableau de données {.flow}

#### Row

```{r}
#| echo: false
#| message: false
#| warning: false
#| expandable: false

library(sf)
library(dplyr)
library(reactable)

# Charger et transformer les données
indicateur_s12a <- st_read("layers/indicateurs.geojson", quiet = TRUE) %>%
  mutate(s12a = ifelse(is.na(s12a), 0, s12a)) %>%
  st_drop_geometry() %>%
  select(insee_com, nom, population, s12a) %>%
  rename(
    Commune = nom,
    `Code INSEE` = insee_com,
    Population = population,
    `Population en zone fortement inondable` = s12a
  ) %>%
  mutate(
    Population = format(Population, big.mark = " ", scientific = FALSE),
    `Population en zone fortement inondable` = format(`Population en zone fortement inondable`, big.mark = " ", scientific = FALSE)
  )

# Afficher avec reactable
reactable(indicateur_s12a,
          filterable = TRUE,
          striped = TRUE,
          sortable = TRUE,
          resizable = TRUE,
          pagination = TRUE,
          defaultPageSize = 10,
          highlight = TRUE,
          theme = reactableTheme(
            borderColor = "#E0E0E0",
            stripedColor = "#f5f5f5",
            highlightColor = "#7591e5",
            cellPadding = "8px 12px",
            style = list(fontSize = "14px", fontFamily = "sans-serif")
          ))

```

### Graphiques {.flow}

#### Row

```{r}
#| echo: false
library(sf)
library(dplyr)
library(jsonlite)

# Charger le GeoJSON
indicateurs <- st_read("layers/indicateurs.geojson", quiet = TRUE) %>%
  st_drop_geometry() %>%
  select(nom, s12a) %>%
  filter(!is.na(s12a))

# Sauvegarder au format JSON dans le dossier _site
write_json(indicateurs, "layers/data_s12a.json", auto_unbox = TRUE)
```

```{ojs}
//| echo: false
//| padding: 5px
//| expandable: false
import { Plot } from "@observablehq/plot";
import { Inputs } from "@observablehq/inputs";

// Charger les données depuis le fichier généré par R
data = FileAttachment("layers/data_s12a.json").json()

html`<label for="slider-s12a" style="display: block;
  margin-top: 1em;
  font-weight: bold;
  margin-bottom: 1em;
  border: 1px solid rgba(0, 0, 0, 0.6);
  box-shadow: 0px 0px 8px 0px rgba(0, 0, 0, 0.8);
  border-radius: 8px;
  padding: 5px;
  text-align: center;
  margin-right: 20%;
  margin-left: 20%;">
  Population en zone inondable
</label>`

// Créer le slider
viewof slider = Inputs.range(
  [0, 230], 
  { value: 230, step: 10, 
  id: "slider-s12a"
  }
)

html`<div style="margin-top: 30px;"></div>`

// Fonction de tri croissant
sorted = data
  .filter(d => d.s12a <= slider)
  .sort((a, b) => a.s12a - b.s12a);
  

Plot.plot({
  marks: [
    Plot.barY(sorted, { x: "nom", y: "s12a", 
    fill: d => {
        const val = d.s12a;
        if (val === 0) return "#d9d9d9";        // null ou 0
        if (val < 10) return "#f9e9e9";
        if (val < 50) return "#ffaaaa";
        if (val < 100) return "#ff5555";
        if (val >= 100) return "#ff0000";
        return "#b30000";
      }
      }),
    Plot.text(sorted, { x: "nom", y: "s12a", text: d => `${d.s12a}`, dy: -10 })
  ],
  y: { grid: true, label: "Population en zone fortement inondable" },
  x: { label: "Commune",
        tickRotate: -45,
        labelAnchor: "right",
        labelOffset: 30},
  width: window.innerWidth * 0.95,
   height: window.innerHeight * 0.85,
  height: 600,
  style: {
    fontSize: "10px",
    fill: "black",
    fontWeight: "bold"
  },
  marginBottom: 130
})

```

# Informations relatives à l'indicateur {.flow}

```{ojs}
//| echo: false
//| padding: 5px
//| expandable: false
md`

<table style="width:90%; border-collapse: collapse; border:1px solid; text-align:center; margin:auto;">
  <colgroup>
    <col style="width:20%;">
    <col style="width:20%;">
    <col style="width:20%;">
    <col style="width:20%;">
    <col style="width:20%;">
  </colgroup>
  <tr>
    <th style="background-color:bisque; border:1px solid;" colspan="2">Numéro d'indicateur</th>
    <th style="border:1px solid;">Ind1/2a</th>
    <th style="background-color:bisque; border:1px solid;">Date de mise à jour</th>
    <th style="border:1px solid;">31/05/2025</th>
  </tr>
  <tr>
    <td colspan="2" style="background-color:bisque; border:1px solid; font-weight: bold;">Intitulé</td>
    <td colspan="3" style="border:1px solid;">Nombre de personnes occupant des bâtiments (logements et activités) de plain-pied
        fortement inondables (plus de 1,5 m d’eau)</td>
  </tr>
  <tr>
    <td colspan="2" style="background-color:bisque; border:1px solid; font-weight: bold;">Objectif de la SNGRI</td>
    <td colspan="3" style="border:1px solid;">Objectif n°1 : Augmenter la sécurité des populations exposées</td>
  </tr>
  <tr>
    <td colspan="2" style="background-color:bisque; border:1px solid; font-weight: bold;">Axe de vulnérabilité</td>
    <td colspan="3" style="border:1px solid;">Axe 1/1 La mise en danger des personnes au sein des bâtiments</td>
  </tr>
  <tr>
    <td colspan="2" style="background-color:bisque; border:1px solid; font-weight: bold;">Source de vulnérabilité</td>
    <td colspan="3" style="border:1px solid;">S1/2 Inondation de bâtiments et risque de rupture des ouvrants dans les zones pouvant
        comporter une hauteur d’eau importante</td>
  </tr>
</table>

<br>

<table style="width:90%; border-collapse: collapse; border:1px solid; text-align:center; margin:auto;">
  <colgroup>
    <col style="width:20%;">
    <col style="width:20%;">
    <col style="width:20%;">
    <col style="width:20%;">
    <col style="width:20%;">
  </colgroup>
  <tr>
    <td colspan="2" style="background-color:bisque; border:1px solid; font-weight: bold;">Modalités du calcul</td>
    <td colspan="3" style="border:1px solid;">On sélectionne les bâtiments (habitation ou activité) de plain-pied qui intersectent la 
        zone d’aléa supérieure à 1,5 m et on comptabilise le nombre de personnes (habitants ou employés). Le résultat est ensuite 
        agrégé à la commune.</td>
  </tr>
  <tr>
    <td colspan="2" style="background-color:bisque; border:1px solid; font-weight: bold;">Échelle de représentation</td>
    <td colspan="3" style="border:1px solid;">Communale</td>
  </tr>
  <tr>
    <td colspan="2" style="background-color:bisque; border:1px solid; font-weight: bold;">Points de vigilance</td>
    <td colspan="3" style="border:1px solid;">Pour les effectifs des employés, les valeurs renseignées dans SIREN sont des fourchettes         de valeurs hautes et basses. Ici, le choix de prendre la valeur haute a été retenu pour éviter de minimiser le total.
        Lors de l’affectation des personnes au bâtiment, pour des carreaux à faible densité de personnes, des valeurs décimales ont pu         être attribuées aux bâtiments.</td>
  </tr>
  <tr>
    <td colspan="2" style="background-color:bisque; border:1px solid; font-weight: bold;">Table cible</td>
    <td colspan="3" style="border:1px solid;">p_obj1_securite_personnes. s12a_pop_plainpied_zi_fort</td>
  </tr>
  <tr>
  <tr>
    <td colspan="2" style="background-color:bisque; border:1px solid; font-weight: bold;">Variables mobilisées</td>
    <td colspan="3" style="border:1px solid;">Zd : hauteur d’eau > 1.5m,
        Pop1 : habitants,
        Pop2 : employés</td>
  </tr>
  <tr>
  <tr>
    <td colspan="2" style="background-color:bisque; border:1px solid; font-weight: bold;">Indicateur commun SLGRI Vienne/Clain</td>
    <td colspan="3" style="border:1px solid;">non</td>
  </tr>
  <tr>
</table>

<br>

<table style="width:90%; border-collapse: collapse; border:1px solid; text-align:center; margin:auto;">
  <colgroup>
    <col style="width:10%;">
    <col style="width:10%;">
    <col style="width:10%;">
    <col style="width:10%;">
    <col style="width:10%;">
    <col style="width:10%;">
    <col style="width:10%;">
    <col style="width:10%;">
    <col style="width:10%;">
    <col style="width:10%;">
  </colgroup>

  <tr>
    <td colspan="10" style="background-color:bisque; border:1px solid; font-weight: bold;">Données sources</td>
  </tr>
  <tr>
    <th style="background-color:bisque; border:1px solid;" colspan="2">Désignation</th>
    <th style="background-color:bisque; border:1px solid;">Millésime</th>
    <th style="background-color:bisque; border:1px solid;">Nationale/locale</th>
    <th style="background-color:bisque; border:1px solid;">Format</th>
    <th style="background-color:bisque; border:1px solid;">Type</th>
    <th style="background-color:bisque; border:1px solid;" colspan="2">Producteur</th>
    <th style="background-color:bisque; border:1px solid;" colspan="2">Nom fichier</th>
  </tr>
  <tr>
    <td colspan="2" style="border:1px solid;">Hauteur d’eau >1.5m</td>
    <td style="border:1px solid;">2019</td>
    <td style="border:1px solid;">Locale</td>
    <td style="border:1px solid;">Shape</td>
    <td style="border:1px solid;">Polygone</td>
    <td colspan="2" style="border:1px solid;">Cerema</td>
    <td colspan="2" style="border:1px solid;">zd_sup_1m50.shp</td>
  </tr>
  <tr>
    <td colspan="2" style="border:1px solid;">Bâtiment BDTOPO</td>
    <td style="border:1px solid;">2020</td>
    <td style="border:1px solid;">Nationale</td>
    <td style="border:1px solid;">Shape</td>
    <td style="border:1px solid;">Polygone</td>
    <td colspan="2" style="border:1px solid;">IGN</td>
    <td colspan="2" style="border:1px solid;">Batiment.shp</td>
  </tr>
  <tr>
    <td colspan="2" style="border:1px solid;">Population carreau 200m INSEE</td>
    <td style="border:1px solid;">2015</td>
    <td style="border:1px solid;">Nationale</td>
    <td style="border:1px solid;">Shape</td>
    <td style="border:1px solid;">Polygone</td>
    <td colspan="2" style="border:1px solid;">INSEE</td>
    <td colspan="2" style="border:1px solid;">filosofi2015_carreaux_200m.shp</td>
  </tr>
  <tr>
    <td colspan="2" style="border:1px solid;">Effectif des entreprises</td>
    <td style="border:1px solid;">2021</td>
    <td style="border:1px solid;">Nationale</td>
    <td style="border:1px solid;">Shape</td>
    <td style="border:1px solid;">Point</td>
    <td colspan="2" style="border:1px solid;">INSEE</td>
    <td colspan="2" style="border:1px solid;">geo_siret.shp</td>
  </tr>
  <tr>
    <td colspan="2" style="border:1px solid;">Communes</td>
    <td style="border:1px solid;">2020</td>
    <td style="border:1px solid;">Nationale</td>
    <td style="border:1px solid;">Shape</td>
    <td style="border:1px solid;">Polygone</td>
    <td colspan="2" style="border:1px solid;">Cerema</td>
    <td colspan="2" style="border:1px solid;">Commune.shp</td>
  </tr>
</table>


`
```

---
title: "Carte Intercative"
lang: fr
back-to-top-navigation: false
format:
  dashboard:
    orientation: columns
    #page-layout: full
    
resources:
  - Images/icons/*.svg
  - layers/data_s12a.json
    
include-in-header:
  text: |
    <script src="js/maplibre.js"></script>
    <link href="js/maplibre.css" rel="stylesheet">
    <script src="js/jquery_3.5.min.js" type="text/javascript"></script>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" rel="stylesheet">
    
    <link rel="stylesheet" href="js/photon-geocoder-autocomplete.min.css" type="text/css">
    <script src="js/photon-geocoder-autocomplete.min.js" type="text/javascript"></script>
---

```{=html}
<div id="nav-menu-objectifs-n°1"></div>
```

##  {.sidebar}

```{ojs}
//| echo: false
//| output: false
bbox_sru = FileAttachment("layers/bb.json").json()
```

```{=html}
<div style="color:#dc7633; text-align:inherit !important; font-size:1.3em; font-weight:bold; font-family: calibri;margin-bottom:10%;">
 Nombre de personnes occupant des bâtiments (logements et activités) de plain-pied fortement inondables (plus de 1,5 m d’eau) 
 </div>

<div style="text-align:inherit !important; font-size:1.1em; font-family: calibri;margin-bottom:10%;"> Le niveau des eaux peut monter relativement vite pour piéger des personnes dans des locaux ne disposant pas d’un accès vers un étage refuge. Dans les locaux où la hauteur d’eau peut être importante (supérieure à 1,5m), cela représente un danger. </div>


<a href=https://fiches.eptb-vienne.fr/ind_12a.pdf target=_blank><i class="fa fa-exclamation-circle"></i> Télécharger la fiche indicateur et la carte</a> 


<div style="width: auto; padding:5px; border: 1px solid #A0A0A0; border-radius:15px; text-align: center !important; background: #F2F2F2; font-size:1.1em;margin-top:10%;">
La zone inondable correspond à l'aléa centennal construit à partir des données disponibles et notamment réglementaires mais en aucun cas ne se substitue aux documents réglementaires en vigueur.
</div>
```

# Cartographie

## Column {width="70%"}

```{ojs}
//| echo: false
//| output: false

bassin_vienne = FileAttachment("layers/bassin_vienne.geojson").json();
departement = FileAttachment("layers/departement.geojson").json();
region = FileAttachment("layers/region.geojson").json();
epci = FileAttachment("layers/epci.geojson").json();
perimetre = FileAttachment("layers/perimetre.json").json();
slgri = FileAttachment("layers/slgri.json").json();
tri = FileAttachment("layers/tri.json").json();
zone_inondable = FileAttachment("layers/zone_inondable.geojson").json();
indicateurs = FileAttachment("layers/indicateurs.json").json();
cours_d_eau = FileAttachment("layers/cours_d_eau.geojson").json();
indicateursGeojson = FileAttachment("layers/indicateurs.geojson").json();


```

```{ojs}
//| echo: false
//| padding: 0px
//| expandable: false
//| fill: true


map = {
  const container = html`<div class="map-container" id="map" style="height: 720px; width: 100%;"></div>`;
  yield container;

  const sourcePlanIGN = {
    style: 'normal',
    format: 'image/png',
    layer: 'GEOGRAPHICALGRIDSYSTEMS.PLANIGNV2'
  };

  const sourceOrtho = {
    style: 'normal',
    format: 'image/jpeg',
    layer: 'HR.ORTHOIMAGERY.ORTHOPHOTOS'
  };

  const map = new maplibregl.Map({
    container: container,
    style: 'https://basemaps.cartocdn.com/gl/voyager-gl-style/style.json',
    <!-- center: [-0.04, 46.3051],  -->
    zoom: 11
  });

  map.addControl(new maplibregl.FullscreenControl(), 'top-right');
  map.addControl(new maplibregl.NavigationControl({ visualizePitch: true }), 'top-left');
  map.addControl(new maplibregl.ScaleControl({ maxWidth: 80, unit: 'metric' }));
  

  const toggleStyle = (useOrtho) => {
    if (useOrtho) {
      map.setLayoutProperty('orthoIGN', 'visibility', 'visible');
      map.setLayoutProperty('planIGN', 'visibility', 'none');
    } else {
      map.setLayoutProperty('orthoIGN', 'visibility', 'none');
      map.setLayoutProperty('planIGN', 'visibility', 'visible');
    }
  };

  map.on('load', () => {
    map.fitBounds(
    [
      [-0.04, 46.3051],   // Sud-Ouest
      [0.7741, 46.8565]   // Nord-Est
    ],
    {
      padding: 20,
      linear: true,
      duration: 0
    }
  );
    // Ajout des fonds raster IGN
    map.addSource('raster-planign', {
      type: 'raster',
      tiles: [
        `https://data.geopf.fr/wmts?SERVICE=WMTS&style=${sourcePlanIGN.style}&VERSION=1.0.0&REQUEST=GetTile&format=${sourcePlanIGN.format}&layer=${sourcePlanIGN.layer}&tilematrixset=PM&TileMatrix={z}&TileCol={x}&TileRow={y}`
      ],
      tileSize: 256,
      attribution: '© <a href="https://www.ign.fr/">IGN</a>',
      minzoom: 0,
      maxzoom: 22
    });

    map.addSource('raster-ortho', {
      type: 'raster',
      tiles: [
        `https://data.geopf.fr/wmts?SERVICE=WMTS&style=${sourceOrtho.style}&VERSION=1.0.0&REQUEST=GetTile&format=${sourceOrtho.format}&layer=${sourceOrtho.layer}&tilematrixset=PM&TileMatrix={z}&TileCol={x}&TileRow={y}`
      ],
      tileSize: 256,
      attribution: '© <a href="https://www.ign.fr/">IGN</a>',
      minzoom: 0,
      maxzoom: 22
    });

    map.addLayer({
      id: 'planIGN',
      type: 'raster',
      source: 'raster-planign',
      layout: { visibility: 'visible' }
    });

    map.addLayer({
      id: 'orthoIGN',
      type: 'raster',
      source: 'raster-ortho',
      layout: { visibility: 'none' }
    });
    
    //fetch('layers/indicateurs.geojson')
     //.then(response => response.json())
     //.then(indicateursGeojson => { 
              
    
    const layersData = [
      { data: bassin_vienne, type: 'line', id: 'bassinvienneLayer', color: 'green', layout: {visibility:'none'}},
      { data: region, type: 'line', id: 'regionLayer', color: 'red', layout: {visibility:'none'} },
      { data: departement, type: 'line', id: 'departementLayer', color: '#a772b9', width: 2,  layout:{visibility:'none'}},
      { data: epci, type: 'line', id: 'epciLayer', color: '#567ae3', layout: {visibility:'none'} },
      { data: indicateursGeojson, // GeoJSON contenant une propriété 's12a' -->
        type: 'fill',
        id: 'indicateurs12aLayer',
        opacity: 0.7,
        width: 1,
        dynamicColor: { 
        property: 's12a',
        mapping: { 
           '-1': '#f1eeed',
           '0': '#ffffff', 
           '10': '#ffaaaa',
           '50': '#ff5555', 
           '100': '#ff0000'
          }, 
         default: '#f1eeed'
        }
        , layout: {visibility:'visible'}
         },
      { data: zone_inondable, type: 'fill', id: 'zoneinondableLayer', color: '#b4c3ef' , width: 2, opacity: 1, 
      layout: {visibility:'visible'} }
      
    ];
     
    // Ajout des couches vectorielles
      layersData.forEach(layer => {
        map.addSource(layer.id, {
          type: 'geojson',
          data: layer.data
        });
      
        const layerConfig = {
          id: layer.id,
          type: layer.type,
          source: layer.id,
          paint: {},
          layout: layer.layout
        };
      
        if (layer.type === 'fill') {
          if (layer.dynamicColor) {
            // Construction d'un tableau 'step' basé sur dynamicColor.mapping
            const stepArray = ['step', ['get', layer.dynamicColor.property]];
            const entries = Object.entries(layer.dynamicColor.mapping)
              .map(([key, value]) => [parseFloat(key), value])
              .sort((a, b) => a[0] - b[0]);
      
            // Valeur par défaut (pour les valeurs < premier seuil)
            stepArray.push(layer.dynamicColor.default || '#888888');
      
            // Ajoute chaque seuil avec sa couleur
            entries.forEach(([threshold, color]) => {
              stepArray.push(threshold, color);
            });
      
            layerConfig.paint['fill-color'] = stepArray;
          } else {
            layerConfig.paint['fill-color'] = layer.color || '#000000';
          }
      
          layerConfig.paint['fill-opacity'] = layer.opacity || 0.4;
          
          
          layerConfig.paint['fill-outline-color'] = '#000000';
      
        } else if (layer.type === 'line') {
          layerConfig.paint['line-color'] = layer.color || '#000000';
          layerConfig.paint['line-width'] = layer.width || 1;
        }
      
      
        map.addLayer(layerConfig);
        
      
      map.on('click', 'indicateurs12aLayer', (e) => {
        const feature = e.features[0];
      
        const nom = feature.properties.nom || 'Non disponible';
        const population = feature.properties.population
        ? feature.properties.population.toLocaleString('fr-FR') + ' habitants'
        : 'Non disponible';
        const s12a = feature.properties.s12a || '0';
      
        const popupContent = `
          <hr><strong><center>Commune : ${nom}</center></strong><hr>
          <strong>- Population :</strong> ${population}<br>
          <strong>- Nombre de personnes en zone fortement inondable :</strong> ${s12a}<br>
        `;
      
        new maplibregl.Popup()
          .setLngLat(e.lngLat)
          .setHTML(popupContent)
          .addTo(map);
      });


      map.on('mouseenter', 'indicateurs12aLayer', () => {
        map.getCanvas().style.cursor = 'pointer';
      });
      map.on('mouseleave', 'indicateurs12aLayer', () => {
        map.getCanvas().style.cursor = '';
      });
    });

    // Interface de contrôle des couches
    const mapLayersDiv = document.createElement('div');
    mapLayersDiv.classList.add('mapLayers');
    mapLayersDiv.style.position = 'absolute';
    mapLayersDiv.style.zIndex = '1000';
    mapLayersDiv.innerHTML = `
      <button id="toggleMapMenuButton" class="btn btn-light aria-label="Afficher les couches" title="Afficher les couches">
        <img src="Images/icons/layers-half.svg" alt="Icône SVG" width="25" height="25">
      </button>
      <div id="layersList" style="display: none; background: white; padding: 10px; border: 1px solid #ccc;"></div>
    `;
    map.getContainer().appendChild(mapLayersDiv);

    const toggleableLayerIds = layersData.map(layer => layer.id);
    const aliasLayerIds = {
      bassinvienneLayer: 'Bassin de la Vienne',
      regionLayer: 'Région',
      departementLayer: 'Département',
      epciLayer: 'EPCI',
      zoneinondableLayer: 'Zonage Inondable',
      indicateurs12aLayer: 'Bâtiments de plain-pied'
    };

    function toggleLayerVisibility(id, visible) {
      const visibility = visible ? 'visible' : 'none';
      if (map.getLayer(id)) {
        map.setLayoutProperty(id, 'visibility', visibility);
      }
    }

    const layersListDiv = mapLayersDiv.querySelector('#layersList');
    
    toggleableLayerIds.forEach(id => {
      const name = aliasLayerIds[id] || id;

      const checkbox = document.createElement('input');
      checkbox.type = 'checkbox';
      checkbox.id = id;
      checkbox.className = 'form-check-input';
      
      // ✅ Lire la visibilité actuelle directement dans la carte
      map.once('idle', () => {
        const visibility = map.getLayoutProperty(id, 'visibility');
        checkbox.checked = visibility === 'visible';
      });
  
      checkbox.addEventListener('change', () => toggleLayerVisibility(id, checkbox.checked));

      const label = document.createElement('label');
      label.htmlFor = id;
      label.className = 'form-check-label';
      label.innerText = name;

      const wrapper = document.createElement('div');
      wrapper.className = 'form-check';
      wrapper.appendChild(checkbox);
      wrapper.appendChild(label);

      layersListDiv.appendChild(wrapper);
    });

    document.getElementById('toggleMapMenuButton').addEventListener('click', () => {
      layersListDiv.style.display = layersListDiv.style.display === 'none' ? 'block' : 'none';
    });
     

    // Menu bascule fond de plan
    const mapMenuDiv = document.createElement('div');
    mapMenuDiv.classList.add('mapFondDePlan');
    mapMenuDiv.style.position = 'absolute';
    mapMenuDiv.style.zIndex = '1000';
    mapMenuDiv.innerHTML = `
      <strong>Fond de plan :</strong>
      <div class="form-check form-switch">
        <input class="form-check-input" type="checkbox" role="switch" id="orthoCheckbox">
        <label class="form-check-label" for="orthoCheckbox">Photos aériennes</label>
      </div>
    `;
    map.getContainer().appendChild(mapMenuDiv);

    document.getElementById('orthoCheckbox').addEventListener('change', function (e) {
      e.preventDefault();
      e.stopPropagation();
      toggleStyle(this.checked);
    });
  });
};


```

## Column {.tabset width="30%"}

### Tableau de données {.flow}

#### Row

```{r}
#| echo: false
#| message: false
#| warning: false

library(sf)
library(dplyr)
library(reactable)

# Charger et transformer les données
indicateur_s12a <- st_read("layers/indicateurs.geojson", quiet = TRUE) %>%
  mutate(s12a = ifelse(is.na(s12a), 0, s12a)) %>%
  st_drop_geometry() %>%
  select(insee_com, nom, population, s12a) %>%
  rename(
    Commune = nom,
    `Code INSEE` = insee_com,
    Population = population,
    `Population en zone fortement inondable` = s12a
  ) %>%
  mutate(
    Population = format(Population, big.mark = " ", scientific = FALSE),
    `Population en zone fortement inondable` = format(`Population en zone fortement inondable`, big.mark = " ", scientific = FALSE)
  )

# Afficher avec reactable
reactable(indicateur_s12a,
          filterable = TRUE,
          striped = TRUE,
          sortable = TRUE,
          resizable = TRUE,
          pagination = TRUE,
          defaultPageSize = 10,
          highlight = TRUE,
          theme = reactableTheme(
            borderColor = "#E0E0E0",
            stripedColor = "#f5f5f5",
            highlightColor = "#7591e5",
            cellPadding = "8px 12px",
            style = list(fontSize = "14px", fontFamily = "sans-serif")
          ))

```

### Graphiques {.flow}

#### Row 

```{r}
#| echo: false
library(sf)
library(dplyr)
library(jsonlite)

# Charger le GeoJSON
indicateurs <- st_read("layers/indicateurs.geojson", quiet = TRUE) %>%
  st_drop_geometry() %>%
  select(nom, s12a) %>%
  filter(!is.na(s12a))

# Sauvegarder au format JSON dans le dossier _site
write_json(indicateurs, "layers/data_s12a.json", auto_unbox = TRUE)
```

```{ojs}
//| echo: false
//| padding: 5px
//| expandable: false
import { Plot } from "@observablehq/plot";
import { Inputs } from "@observablehq/inputs";

// Charger les données depuis le fichier généré par R
data = FileAttachment("layers/data_s12a.json").json()

// Créer le slider
viewof slider = Inputs.range(
  [0, 230], 
  { value: 230, step: 10, label: "Population en zone inondable" }
)

// Fonction de tri croissant
sorted = data
  .filter(d => d.s12a <= slider)
  .sort((a, b) => a.s12a - b.s12a);
  

Plot.plot({
  marks: [
    Plot.barY(sorted, { x: "nom", y: "s12a", fill: "steelblue" }),
    Plot.text(sorted, { x: "nom", y: "s12a", text: d => `${d.s12a}`, dy: -10 })
  ],
  y: { grid: true, label: "Population en zone fortement inondable" },
  x: { label: "Commune",
        tickRotate: -45,
        labelAnchor: "right",
        labelOffset: 30},
  width: window.innerWidth * 0.95,
   height: window.innerHeight * 0.85,
  height: 600,
  style: {
    fontSize: "10px",
    fill: "black",
    fontWeight: "bold"
  },
  marginBottom: 130
})

```